#include <Windows.h>
#include <Softpub.h>
#include <Wintrust.h>
#include <iostream>
#include <string>
#pragma comment(lib, "Wintrust.lib")
#pragma comment(lib, "Crypt32.lib")

int main()
{
    LONG lStatus;
    DWORD dwLastError;
    std::wstring pwszSourceFile = L"C:\\Windows\\System32\\cmd.exe";

    // Initialize the WINTRUST_FILE_INFO structure.
    WINTRUST_FILE_INFO FileData;
    memset(&FileData, 0, sizeof(FileData));
    FileData.cbStruct = sizeof(FileData);
    FileData.pcwszFilePath = pwszSourceFile.c_str();
    FileData.hFile = NULL;
    FileData.pgKnownSubject = NULL;

    // Initialize the WinVerifyTrust input data structure.
    GUID WVTPolicyGUID = WINTRUST_ACTION_GENERIC_VERIFY_V2;
    WINTRUST_DATA WinTrustData;
    memset(&WinTrustData, 0, sizeof(WinTrustData));
    WinTrustData.cbStruct = sizeof(WinTrustData);
    WinTrustData.pPolicyCallbackData = NULL;
    WinTrustData.pSIPClientData = NULL;
    WinTrustData.dwUIChoice = WTD_UI_NONE;
    WinTrustData.fdwRevocationChecks = WTD_REVOKE_NONE;
    WinTrustData.dwUnionChoice = WTD_CHOICE_FILE;
    WinTrustData.dwStateAction = WTD_STATEACTION_VERIFY;
    WinTrustData.hWVTStateData = NULL;
    WinTrustData.pwszURLReference = NULL;
    WinTrustData.dwUIContext = 0;
    WinTrustData.pFile = &FileData;

    // WinVerifyTrust verifies signatures as specified by the GUID and Wintrust_Data.
    lStatus = WinVerifyTrust(NULL, &WVTPolicyGUID, &WinTrustData);

    switch (lStatus) {

        case ERROR_SUCCESS:
            wprintf_s(L"The file \"%s\" is signed and the signature "
                      L"was verified.\n",
                      pwszSourceFile.c_str());
            break;

        case TRUST_E_NOSIGNATURE:
            // The file was not signed or had a signature that was not valid.
            dwLastError = GetLastError();

            if (TRUST_E_NOSIGNATURE == dwLastError || TRUST_E_SUBJECT_FORM_UNKNOWN == dwLastError ||
                TRUST_E_PROVIDER_UNKNOWN == dwLastError) {
                // The file was not signed.
                wprintf_s(L"The file \"%s\" is not signed.\n", pwszSourceFile.c_str());
            } else {
                // The signature was not valid or there was an error opening the file.
                wprintf_s(L"An unknown error occurred trying to "
                          L"verify the signature of the \"%s\" file.\n",
                          pwszSourceFile.c_str());
            }

            break;

        case TRUST_E_EXPLICIT_DISTRUST:
            // The hash that represents the subject or the publisher is not allowed by the admin or user.
            wprintf_s(L"The signature is present, but specifically "
                      L"disallowed.\n");
            break;

        case TRUST_E_SUBJECT_NOT_TRUSTED:
            // The user clicked "No" when asked to install and run.
            wprintf_s(L"The signature is present, but not "
                      L"trusted.\n");
            break;

        case CRYPT_E_SECURITY_SETTINGS:
// The hash that represents the subject or the publisher was not explicitly trusted by the admin and the admin
// Any hWVTStateData must be released by a call with close.

            wprintf_s(L"CRYPT_E_SECURITY_SETTINGS - The hash "
                      L"representing the subject or the publisher wasn't "
                      L"explicitly trusted by the admin and admin policy "
                      L"has disabled user trust. No signature, publisher "
                      L"or timestamp errors.\n");
            break;

        default:
            // The UI was disabled in dwUIChoice or the admin policy
            // has disabled user trust. lStatus contains the
            // publisher or time stamp chain error.
            wprintf_s(L"Error is: 0x%x.\n",
                      lStatus);
            break;
    }
    WinTrustData.dwStateAction = WTD_STATEACTION_CLOSE;

//    lStatus = WinVerifyTrust(
//            NULL,
//            &WVTPolicyGUID,
//            &WinTrustData);


    return 0;
}
